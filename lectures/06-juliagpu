{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GPU Computing in Julia\n",
    "\n",
    "This session demonstrates the GPU computing in Julia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "versioninfo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Query GPU devices in the system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3-element Array{OpenCL.cl.Device,1}:\n",
       " OpenCL.Device(Intel(R) HD Graphics 530 on Apple @0x0000000001024500)                 \n",
       " OpenCL.Device(AMD Radeon Pro 460 Compute Engine on Apple @0x0000000001021c00)        \n",
       " OpenCL.Device(Intel(R) Core(TM) i7-6920HQ CPU @ 2.90GHz on Apple @0x00000000ffffffff)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Julia Version 0.6.4\n",
      "Commit 9d11f62bcb (2018-07-09 19:09 UTC)\n",
      "Platform Info:\n",
      "  OS: macOS (x86_64-apple-darwin14.5.0)\n",
      "  CPU: Intel(R) Core(TM) i7-6920HQ CPU @ 2.90GHz\n",
      "  WORD_SIZE: 64\n",
      "  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Haswell MAX_THREADS=16)\n",
      "  LAPACK: libopenblas64_\n",
      "  LIBM: libopenlibm\n",
      "  LLVM: libLLVM-3.9.1 (ORCJIT, skylake)\n"
     ]
    }
   ],
   "source": [
    "using GPUArrays, CLArrays\n",
    "\n",
    "# check available devices on this machine\n",
    "CLArrays.devices()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OpenCL context with:\n",
       "CL version: OpenCL 1.2 \n",
       "Device: CL AMD Radeon Pro 460 Compute Engine\n",
       "            threads: 256\n",
       "             blocks: (256, 256, 256)\n",
       "      global_memory: 4294.967296 mb\n",
       " free_global_memory: NaN mb\n",
       "       local_memory: 0.032768 mb\n"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use the AMD Radeon Pro 460 GPU\n",
    "dev = CLArrays.devices()[2]\n",
    "CLArrays.init(dev)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate arrays on GPU devices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPU: 5×5 Array{Float32,2}:\n",
       " 0.282438   0.288461    0.425512  0.632621  0.141995 \n",
       " 0.3416     0.730267    0.405668  0.925261  0.606434 \n",
       " 0.0207534  0.00322844  0.937711  0.503301  0.148619 \n",
       " 0.13636    0.553946    0.894025  0.446051  0.0555661\n",
       " 0.54389    0.484792    0.972734  0.196462  0.308813 "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# generate GPU arrays\n",
    "xd = rand(CLArray{Float32}, 5, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPU: 5×5 Array{Float32,2}:\n",
       " 1.0  1.0  1.0  1.0  1.0\n",
       " 1.0  1.0  1.0  1.0  1.0\n",
       " 1.0  1.0  1.0  1.0  1.0\n",
       " 1.0  1.0  1.0  1.0  1.0\n",
       " 1.0  1.0  1.0  1.0  1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yd = ones(CLArray{Float32}, 5, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPU: 5×5 Array{Float32,2}:\n",
       " 0.245842   0.250352    0.345564  0.464527  0.132359 \n",
       " 0.288927   0.511067    0.332631  0.587107  0.451038 \n",
       " 0.0205394  0.00322323  0.591228  0.393609  0.138084 \n",
       " 0.127458   0.422681    0.576388  0.358658  0.0540501\n",
       " 0.417043   0.382554    0.602362  0.178315  0.265381 "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# elementiwise operations\n",
    "zd = log.(yd .+ sin.(xd))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPU: 5×5 Array{Float32,2}:\n",
       " 0.282438   0.288461    0.425512  0.632621  0.141995 \n",
       " 0.3416     0.730267    0.405668  0.925261  0.606434 \n",
       " 0.0207533  0.00322843  0.937711  0.503301  0.148619 \n",
       " 0.13636    0.553946    0.894025  0.446051  0.0555661\n",
       " 0.54389    0.484792    0.972734  0.196463  0.308813 "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# getting back x\n",
    "asin.(exp.(zd) .- yd) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear algebra."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPU: 5×5 Array{Float32,2}:\n",
       " 1.77103  1.77103  1.77103  1.77103  1.77103\n",
       " 3.00923  3.00923  3.00923  3.00923  3.00923\n",
       " 1.61361  1.61361  1.61361  1.61361  1.61361\n",
       " 2.08595  2.08595  2.08595  2.08595  2.08595\n",
       " 2.50669  2.50669  2.50669  2.50669  2.50669"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A_mul_B!(zd, xd, yd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  2.86 KiB\n",
       "  allocs estimate:  96\n",
       "  --------------\n",
       "  minimum time:     17.486 μs (0.00% GC)\n",
       "  median time:      23.223 μs (0.00% GC)\n",
       "  mean time:        26.641 μs (3.17% GC)\n",
       "  maximum time:     18.880 ms (44.70% GC)\n",
       "  --------------\n",
       "  samples:          10000\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using BenchmarkTools\n",
    "\n",
    "n = 500\n",
    "xd = rand(CLArray{Float32}, n, n)\n",
    "yd = rand(CLArray{Float32}, n, n)\n",
    "zd = zeros(CLArray{Float32}, n, n)\n",
    "@benchmark A_mul_B!($zd, $xd, $yd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     1.019 ms (0.00% GC)\n",
       "  median time:      1.438 ms (0.00% GC)\n",
       "  mean time:        1.450 ms (0.00% GC)\n",
       "  maximum time:     3.142 ms (0.00% GC)\n",
       "  --------------\n",
       "  samples:          3437\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = rand(Float32, n, n)\n",
    "y = rand(Float32, n, n)\n",
    "z = zeros(Float32, n, n)\n",
    "\n",
    "@benchmark A_mul_B!($z, $x, $y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.6.4",
   "language": "julia",
   "name": "julia-0.6"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.6.4"
  },
  "toc": {
   "colors": {
    "hover_highlight": "#DAA520",
    "running_highlight": "#FF0000",
    "selected_highlight": "#FFD700"
   },
   "moveMenuLeft": true,
   "nav_menu": {
    "height": "30px",
    "width": "252px"
   },
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 4,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false,
   "widenNotebook": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
